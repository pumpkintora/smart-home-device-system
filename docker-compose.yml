version: "3"

services:
  user-management-backend:
    image: rkrkrk98/smarthome-user-backend
    depends_on:
      - mysqldb
    build:
      context: user-management-server
    restart: on-failure
    container_name: user-management-backend
    working_dir: /usr/src/app
    env_file: ./.env
    environment:
      - DB_HOST=mysqldb
      - DB_USER=root
      - DB_PASSWORD=admin
      - DB_NAME=smarthome
      - DB_PORT=3306
    # networks:
    #   - node-network
    tty: true
    ports:
      - "3001:3001"
    command: npm run prod

  business-logic-backend:
    image: rkrkrk98/smarthome-business-backend
    depends_on:
      - mysqldb
    build:
      context: business-logic-server
    restart: on-failure
    container_name: business-logic-backend
    working_dir: /usr/src/app
    env_file: ./.env
    environment:
      - DB_HOST=mysqldb
      - DB_USER=root
      - DB_PASSWORD=admin
      - DB_NAME=smarthome
      - DB_PORT=3306
    # networks:
    #   - node-network
    tty: true
    ports:
      - "3002:3002"
    command: npm run prod

  frontend:
    image: rkrkrk98/smarthome-frontend
    build:
      context: client
      args:
        - REACT_APP_USER_SERVER_API=http://localhost:3001
        - REACT_APP_BUSINESS_SERVER_API=http://localhost:3002
    ports:
      - "80:80"
    # networks:
    #   - node-network
    # command: npm start

  mysqldb:
    image: mysql:latest
    # build:
    #   context: sql
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: smarthome
      MYSQL_ROOT_PASSWORD: admin
    volumes:
      # - mysql-data:/var/lib/mysql
      - ./sql-init:/docker-entrypoint-initdb.d/
    # networks:
    #   - node-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      retries: 10
      interval: 3s
      timeout: 30s

  # nginx:
  #   depends_on:
  #     - frontend
  #   restart: always
  #   build:
  #     context: ./nginx
  #   ports:
  #     - "80:80"
    
  # nginx:
  #   build:
  #     context: nginx
  #   container_name: nginx
  #   restart: always
  #   tty: true
  #   ports:
  #     - "8000:80"
  #   networks:
  #     - node-network
  #   depends_on:
  #     - user-management-backend
  #     - business-logic-backend
  #     - frontend

# networks:
#   node-network:
#     driver: bridge